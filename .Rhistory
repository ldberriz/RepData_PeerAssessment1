getwd()
read.csv("activity,csv")
read.csv("activity.csv")
dta <- read.csv("activity.csv")
head(dta)
str(dta)
dta <- read.csv("activity.csv")
dta$DateTime <- strptime(dta$DateTime, "%Y-%m-%d %H:%M:%S")
dta$date <- strptime(dta$date, "%Y-%m-%d %H:%M:%S")
str(dta)
head(dta)
head(dta.100)
head(dta,100)
?strptime
source('~/.active-rstudio-document')
getdta
View(dta)
cacheFile <- "activity.csv"
getdta <- function() {
cacheFile <- "activity.csv"
dta <- read.csv(cacheFile)
dta$DateTime <- strptime(dta$DateTime, "%Y-%m-%d %H:%M:%S")  ## Rearrange the time
}
View(dta)
source('~/.active-rstudio-document')
getdta()
View(dta)
source('~/.active-rstudio-document')
View(dta)
read.csv(cacheFile)
dta <- read.csv(cacheFile)
dta
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getdta()
View(dta)
sta(dta)
str(dta)
source('~/.active-rstudio-document')
getdta()
View(dta)
str(dta)
plot(steps, date, dta)
?plot
plot(steps, date, date = dta)
plot(steps, date, data = dta)
attach(dta)
plot(steps, date)
plot(steps, date, type = 'p')
plot(steps, date, type = 'l')
plot(date,steps  type = 'l')
plot(date,steps , type = 'l')
hist(steps)
hist(log(steps)
)
hist(log(steps))
str(dta)
source('~/.active-rstudio-document')
getdta()
str(dta)
class(date)
dta <- read.csv(cacheFile)
View(dta)
class(date)
dta$date <- strptime(dta$date, "%Y-%m-%d %H:%M:%S")  ## Convert the
class(date)
cacheFile <- "plot_data.csv"  ## Create a data file to hold the clean data
dta <- read.csv(cacheFile)
str(dta)
dta$DateTime <- strptime(dta$DateTime, "%Y-%m-%d %H:%M:%S")  ## Rearrange the time
str(dta)
source('~/.active-rstudio-document')
getdta()
str(dta)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getdta()
cacheFile <- "activity.csv"
dta <- read.csv(cacheFile)
dta$date <- strptime(dta$date, "%Y-%m-%d")  ## Convert the date to POSIX
str(dta)
getdta()
source('~/.active-rstudio-document')
getdta()
str(dta)
source('~/.active-rstudio-document')
getdta()
dta <- getdta()
dta
head(dta)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dta <- getdta()
head(dta)
str(dta)
source('~/.active-rstudio-document')
dta <- getdta()
str(dta)
dtain <- read.csv(cacheFile)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getdta()
getdta <- function() {
cacheFile <- "activity.csv"
dta <- read.csv(cacheFile)
dta$date <- strptime(dta$date, "%Y-%m-%d")  ## Convert the date to POSIX
}
rm(dta)
source('~/.active-rstudio-document')
dta <- getdta()
head(dta)
cacheFile <- "activity.csv"
dta <- read.csv(cacheFile)
dta$date <- strptime(dta$date, "%Y-%m-%d")  ## Convert the date to POSIX
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getdta()
dta <-getdta()
str(dta)
strdta <- str(dta)
strdta
strdta <- summary(dta)
strdta
dta <- read.csv(cacheFile)
str(dta)
dta <-getdta()
str(dta)
mean(steps)
mean(dta$steps)
View(dta)
mean(dta$steps, na.rm = TRUE)
mean(dsteps, na.rm = TRUE)
mean(steps, na.rm = TRUE)
mean(date, na.rm = TRUE)
mean(interval, na.rm = TRUE)
hist(dta$steps/dta$interval)
hist(dta$steps)
View(dta)
View(dta)
View(dta)
View(dta)
head(dta)
head(dta,30)
summary(dta)
hist(dta$steps, dta$date)
view(dta)
View(dta)
count(dta$date)
dta[5000:5500,]
min(dta$date)
max(dta$date)
max(dta$date) - min(dta$date)
sum(dta$steps)
sum(dta$steps,na.rm = TRUE)
sum(dta$steps,na.rm = TRUE)/( max(dta$date) - min(dta$date))
3/2
(sum(dta$steps,na.rm = TRUE))/(max(dta$date) - min(dta$date))
(sum(dta$steps,na.rm = TRUE))
(max(dta$date) - min(dta$date))
num(max(dta$date) - min(dta$date))
(max(dta$date) - min(dta$date))
pp<- (max(dta$date) - min(dta$date))
class(pp)
?difftime
pp/2
2000/pp
2000/as.numeric(pp)
sum(dta$steps,na.rm = TRUE)/as.numeric(max(dta$date) - min(dta$date))
sum(dta$steps,na.rm = TRUE)
?opts_chunk
??opts_chunk
library("knitr", lib.loc="~/R/win-library/3.1")
?opts_chunk
stepspday <- nsteps / ndays
nsteps <- sum(dta$steps,na.rm = TRUE)
nsteps
?summarize
?summarise
summary(steps)
steps_per_day <- dta$steps %>% group_by(dta$date)
?group
View(dta)
View(dta)
aggregate(dta$steps, by = date, FUN = mean)
aggregate(dta$steps, by = list(date), FUN = mean)
dta2 <- aggregate(dta$steps, by = list(date), FUN = mean)
dta2
cols(dta2)
col(dta2)
names(dta2)
names(dta2) <- c("Dates", "NSteps")
head(dta2)
hist(dta2$NSteps)
hist(dta2$NSteps, xlab = "Number of steps per day",ylab = "Frequency of Days")
hist(dta2$NSteps, xlab = "Number of steps per day",ylab = "Number of Days", main = "Distribution of steps taken each day")
dta2 <- aggregate(dta$steps, by = list(date), FUN = mean)
dta2 <- aggregate(dta$steps, by = list(date), FUN = mean)
View(dta)
head(dta)
tail(dta)
head(dta2)
tail(dta2)
dta2 <- aggregate(dta$steps, by = list(dta$date), FUN = mean)
dta2 <- aggregate(dta$steps, by = list(date), FUN = mean)
View(dta2)
?aggregate
cls(dta)
class(dta)
class(dta2)
barplot(dta2$NSteps, xlab = "Number of steps per day",ylab = "Number of Days", main = "Distribution of steps taken each day")
etwd("~\Coursera\Reproducible Research\RepData_PeerAssessment1")
dfn <- "activity.csv"
if (!dfn) {
unzip(dfn)
}
dta <- read.csv(dfn)
setwd("~/Coursera/Reproducible Research/RepData_PeerAssessment1/")
getwd()
(!file.exist(dfn))
(!file.exists(dfn))
dta
dtaX <- read.csv(dfn)
NOTE: The GitHub repository also contains the dataset for the assignment so you do not have to download the data separately.
source('~/.active-rstudio-document')
rm(dtaX)
dta <- read.csv(dfn)
dta.complete <- na.omit(dta)
steps.day <- aggregate(steps ~ date, data=dta.complete, FUN=sum)
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="blue", fill="white")
library(ggplot2)
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="blue", fill="white")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="blue", fill="red")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500)
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, fill="grey")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="blue", fill="grey")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="blue", fill="blue")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="blue", fill="grey")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="grey")
library(ggplot2)
steps.day <- aggregate(steps ~ date, data=dta.complete, FUN=sum)
ggplot(steps.day, aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="grey")
steps.day <- aggregate(steps ~ date, data=dta.complete, FUN=sum)
ggplot(steps.day, aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="grey")
mean(dta.complete$steps)
mean(dta.complete$steps.day)
steps.day
head(steps.day)
mean(steps.day$steps)
View(steps.day)
View(steps.day)
steps.day
View(steps.day)
steps.day
mean(steps.day$steps)
median(steps.day$steps)
steps.int <- aggregate(steps ~ interval, data=dta.complete, FUN=mean)
steps.interval <- aggregate(steps ~ interval, data=dta.complete, FUN=mean)
ggplot(steps.interval, aes(x=interval, y=steps)) + geom_line(stat="identity")
View(steps.interval)
steps.interval <- aggregate(steps ~ interval, data=dta.complete, FUN=mean)
view(steps.interval)
View(steps.interval)
pp <- steps.interval
View(pp)
max(dta.complete$steps)
steps.interval$interval[which.max(steps.interval$steps)]
which.max(steps.interval$steps)
which.max(dta.complete$steps)
max(interval.steps$steps)
max(steps.interval$steps)
View(steps.int)
steps.interval$interval[which.max(steps.interval$steps)]
steps.interval$interval[which.max(steps.interval$steps)]
View(steps.day)
View(dta)
na.omit(dta$steps)
View(dta)
View(dta)
View(dta)
View(dta)
View(dta)
dta <- read.csv(dfn)
dta <- read.csv(dfn)
na.omit(dta$steps)
dfn <- "activity.csv"
dta <- read.csv(dfn)
length(na.omit(dta$steps))
dta.complete <- na.omit(dta)
View(dta.complete)
dta.filled <- dta
dta.filled$steps[is.na(data.filled)]
dta.filled$steps[is.na(dta.filled)]
dta.filled <- dta
na.omit(dta$steps)
pp <- na.omit(dta$steps)
?na.omit
mean(na.omit(dta$steps))
median(na.omit(dta$steps))
mode(na.omit(dta$steps))
mode(dta$steps)
?mode
?mean
??mode
??mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(na.omit(dta$steps))
mean(steps.day$steps)
median(steps.day$steps)
median(steps.interval$steps)
mean(steps.interval$steps)
mean(dta.complete$steps)
str(dta)
