View(steps.int)
steps.interval$interval[which.max(steps.interval$steps)]
steps.interval$interval[which.max(steps.interval$steps)]
View(steps.day)
View(dta)
na.omit(dta$steps)
View(dta)
View(dta)
View(dta)
View(dta)
View(dta)
dta <- read.csv(dfn)
dta <- read.csv(dfn)
na.omit(dta$steps)
dfn <- "activity.csv"
dta <- read.csv(dfn)
length(na.omit(dta$steps))
dta.complete <- na.omit(dta)
View(dta.complete)
dta.filled <- dta
dta.filled$steps[is.na(data.filled)]
dta.filled$steps[is.na(dta.filled)]
dta.filled <- dta
na.omit(dta$steps)
pp <- na.omit(dta$steps)
?na.omit
mean(na.omit(dta$steps))
median(na.omit(dta$steps))
mode(na.omit(dta$steps))
mode(dta$steps)
?mode
?mean
??mode
??mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(na.omit(dta$steps))
mean(steps.day$steps)
median(steps.day$steps)
median(steps.interval$steps)
mean(steps.interval$steps)
mean(dta.complete$steps)
str(dta)
length(which(is.na(dta$steps)))  # Missing values is only for steps
mean(steps.day$steps)
length(which(is.na(dta$steps)))  # Missing values is only for steps
?ggplot
?ggplot2
library(ggplot2)
?ggplot
ggplot(steps.day, aes(x=steps))
?geom_histogram
ggplot(steps.day)
ggplot(steps.day,aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray") + labs(x = "xlabel", y = "ylabel")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray") + labs(x = "Total Number of Steps Per Day (excluding missing values), y = "Total Number of Steps Per Day")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray") + labs(x = "Total Number of Steps Per Day (excluding missing values)", y = "Total Number of Steps Per Day")
steps.day <- aggregate(steps ~ date, data=dta.complete, FUN=sum)
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray")
ggplot(steps.day,
+      aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray") + labs(x = "Total Number of Steps Per Day (excluding missing values)", y = "Total Number of Steps Per Day")
steps.day <- aggregate(steps ~ date, data=dta.complete, FUN=sum)
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray")
ggplot(steps.day,
aes(x=steps)) + geom_histogram(binwidth=2500, colour="black", fill="gray") +
labs(x = "Total Number of Steps Per Day (excluding missing values)",
y = "Total Number of Steps Per Day")
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test01.R', echo=TRUE)
cnt = 0
i = 1
t1 <- pp[i,"interval"]
t1 <- pp[i,c("interval")]
pp[i,c("interval")]
pp[1,c("interval")]
pp
pp<-dta
pp[1,c("interval")]
pp[i,c("interval")]
pp[1000:1100,c("interval")]
pp[1000:2100,c("interval")]
t1 <- pp[1000:2100,c("interval")]
t1
cnt = 0
for (i in (1:nrow(pp))) {
#if (is.na(pp[i,c("steps")])) {
t1 <- pp[i,c("interval")]
t1
#t2 <- steps.interval[t1,"interval"]
cnt = cnt + 1
#print(paste("index=",i, "pp$interval=",t1,"steps.interval$interval=",t2))
#}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test01.R')
debugSource('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test01.R', echo=TRUE)
debugSource('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test01.R')
t1 <- pp[i,c("interval")]
t1
View(steps.interval)
steps.interval[15]
steps.interval[15,]
steps.interval[15,"steps"]
steps.interval[t1,"steps"]
t1 <- pp[i,c("interval")]
steps.interval[t1,"steps"]
source('~/.active-rstudio-document', echo=TRUE)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test01.R')
View(steps.interval)
max(pp$interval)
source('~/.active-rstudio-document', echo=TRUE)
steps.interval[2235,]
View(steps.interval)
steps.interval[interval=2235,]
steps.interval[(interval=2235),]
steps.interval[(steps.interval$interval=2235),]
steps.interval[(steps.interval$interval==2235),]
View(steps.interval)
View(steps.int)
View(steps.interval)
steps.interval <- steps.int
View(steps.interval)
steps.interval[(steps.interval$interval==2235),]
steps.interval[(steps.interval$interval==2230),]
t1 <- pp[i,c("interval")]
t1
steps.interval[t1,]
t1
steps.interval[(steps.interval$interval==t1),]
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test01.R')
print(paste("index=",t1, "pp$interval=",t1,"steps.interval$interval=",t2))
?paste
paste("index=",t1, "pp$interval=",t1,"steps.interval$interval=",t2)
t1
t2
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
t2
source('~/.active-rstudio-document', echo=TRUE)
View(dta)
View(pp)
for (i in (1:nrow(pp))) {
if (is.na(pp[i,c("steps")])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
cnt = cnt + 1
print(paste("index=",t1, "pp$interval=",t1,"steps.interval$interval=",t2))
}
}
t1
t2
is.na(pp[i,c("steps")]
)
is.na(pp[i,"steps"])
source('~/.active-rstudio-document', echo=TRUE)
for (i in (1:nrow(pp))) {
if (is.na(pp[i,"steps"])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
#pp
###########
cnt = cnt + 1
print(paste("index=",t1, "pp$interval=",t1,"steps.interval$interval=",t2, pp[i,]))
}
}
View(dta)
View(steps.interval)
t1
t2
for (i in (1:nrow(pp))) {
if (is.na(pp[i,"steps"])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
#pp
###########
cnt = cnt + 1
print(paste("index=",t1, "pp$interval=",t1,"steps.interval$interval=",t2, pp[i,"steps"]))
}
}
paste("pp$interval=",t1,"steps.interval$interval=",t2, pp[i,"steps"])
print(paste("pp$interval=",t1,"steps.interval$interval=",t2, pp[i,"steps"]))
for (i in (1:nrow(pp))) {
if (is.na(pp[i,"steps"])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.pre = pp[i,"steps"])
###########
cnt = cnt + 1
print(paste("pp$interval=",t1,"steps.interval$interval=",t2, dta.pre))
}
}
dta.pre
t2
t1
dta.pre
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.pre = pp[i,"steps"])
dta.pre = pp[i,"steps"]
dta.pre <- pp[i,"steps"]
dta.pre
for (i in (1:nrow(pp))) {
if (is.na(pp[i,"steps"])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.pre <- pp[i,"steps"]
###########
cnt = cnt + 1
print(paste("pp$interval=",t1,"steps.interval$interval=",t2, dta.pre))
}
}
for (i in (1:nrow(pp))) {
if (is.na(pp[i,"steps"])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
pp.dta.pre <- pp[i,"steps"]
pp[i,"steps"] <- t2
t3 <- pp[i,"steps"]
###########
cnt = cnt + 1
print(paste("pp$interval=",t1,"steps.interval$interval=",t2, pp.dta.pre))
}
}
View(dta)
View(pp)
pp <- dta
View(pp)
for (i in (1:nrow(pp))) {
if (is.na(pp[i,"steps"])) {
t1 <- pp[i,c("interval")]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
pp.dta.pre <- pp[i,"steps"]
pp[i,"steps"] <- t2
pp.dta.post <- pp[i,"steps"]
###########
cnt = cnt + 1
print(paste("pp$interval=",t1,"steps.interval$interval=",t2, pp.dta.pre, pp.dta.post))
}
}
View(pp)
View(dta)
View(pp)
View(dta)
View(dta.filled)
t1 <- dta[i,c("interval")]
t1
t1 <- dta[i,"interval"]
t1
for (i in (1:nrow(pp))) {
if (is.na(dta[i,"steps"])) {
t1 <- dta[i,"interval"]
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.pre <- pp[i,"steps"]
dta[i,"steps"] <- t2
dta.post <- pp[i,"steps"]
###########
cnt = cnt + 1
print(paste("pp$interval=",t1,"steps.interval$interval=",t2, pp.dta.pre, pp.dta.post))
}
}
View(dta)
View(dta)
View(dta)
dta <- read.csv(dfn)
View(dta)
t1 <- dta[i,"interval"]
t1
i = 1
t1 <- dta[i,"interval"]
t1
View(steps.interval)
max(dta[,"interval"])
summary(dta[,"interval"])
View(dta.filled)
fill.NAdata <- function() {
dta.filled <- dta  # Create a data frame dta.filled to save the data with the missing values filled.
for (i in (1:nrow(dta,filled)))
if (is.na(dta.filled[i,"steps"])) {   # Check the value for steps is missing
t1 <- dta.filled[i,"interval"]      # the value of that interval in t1.  Should be between 0 and 2355
# Use the index t2 to map into the correct row of the steps.interval data frame that
# has the value of the means for each interval.
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.filled[i,"steps"] <- t2         # Fill the missing data.
}
}
View(dta.filled)
fill.NAdata()
source('~/.active-rstudio-document', echo=TRUE)
dta.filled <- dta  # Create a data frame dta.filled to save the data with the missing values filled.
for (i in (1:nrow(dta,filled)))
if (is.na(dta.filled[i,"steps"])) {   # Check the value for steps is missing
t1 <- dta.filled[i,"interval"]      # the value of that interval in t1.  Should be between 0 and 2355
# Use the index t2 to map into the correct row of the steps.interval data frame that
# has the value of the means for each interval.
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.filled[i,"steps"] <- t2         # Fill the missing data.
}
i
dta.filled[i,"steps"] <- t2         # Fill the missing data.
t2
dta.filled[i,"steps"]
source('~/.active-rstudio-document', echo=TRUE)
View(dta.filled)
fill.NAdata()
View(dta.filled)
View(dta)
View(dta.complete)
View(dta.filled)
dta.filled <- dta  # Create a data frame dta.filled to save the data with the missing values filled.
View(dta)
if (is.na(dta.filled[i,"steps"])) {   # Check the value for steps is missing
t1 <- dta.filled[i,"interval"]      # the value of that interval in t1.  Should be between 0 and 2355
# Use the index t2 to map into the correct row of the steps.interval data frame that
# has the value of the means for each interval.
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.filled[i,"steps"] <- t2         # Fill the missing data.
}
i
i = 2
View(dta.filled)
if (is.na(dta.filled[i,"steps"])) {   # Check the value for steps is missing
t1 <- dta.filled[i,"interval"]      # the value of that interval in t1.  Should be between 0 and 2355
# Use the index t2 to map into the correct row of the steps.interval data frame that
# has the value of the means for each interval.
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.filled[i,"steps"] <- t2         # Fill the missing data.
}
View(dta.filled)
source('~/.active-rstudio-document', echo=TRUE)
fill.NAdata()
View(dta.filled)
source('~/.active-rstudio-document', echo=TRUE)
fill.NAdata()
View(dta.complete)
View(dta.filled)
View(dta.filled)
View(dta.filled)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
View(dta.filled)
fill.NAdata()
fill.NAdata()
fill.NAdata()
View(dta.filled)
dta.filled <- dta  # Create a data frame dta.filled to save the data with the missing values filled.
View(dta.filled)
View(dta.filled)
fill.NAdata()
View(dta.filled)
View(dta.filled)
View(dta.filled)
View(dta.filled)
View(dta.filled)
View(dta.filled)
fill.NAdata()
View(dta.filled)
View(dta.filled)
View(dta.filled)
fill.NAdata()
View(dta.filled)
fill.mdata
cl(fill.mdata)
rm(fill.mdata)
View(dta.filled)
source('~/.active-rstudio-document', echo=TRUE)
fill.data()
View(dta.filled)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
fill.data()
View(dta.filled)
View(dta.filled)
fill.data()
View(dta.filled)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
fill.data()
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
fill.data()
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
fill.data()
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
fill.data()
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
fill.data()
View(dta.filled)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
View(dta.filled)
fill.data()
View(dta.filled)
pp <- fill.dta()
pp <- fill.data()
pp
data.filled <- fill.data()
View(data.filled)
View(dta)
View(data.filled)
View(dta)
View(data.filled)
View(data.filled)
View(dta)
View(data.filled)
dta.filled <- fill.data()
View(dta.filled)
source.with.encoding('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R', encoding='UTF-8')
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
dta.filled <- fill.data()
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
dta.filled <- fill.data()
View(dta.filled)
source('~/Coursera/Reproducible Research/RepData_PeerAssessment1/test02.R')
dta.filled <- fill.data()
View(dta.filled)
View(dta.filled)
View(dta.filled)
source('~/.active-rstudio-document', echo=TRUE)
View(dta.filled)
View(dta.complete)
View(dta)
View(dta.filled)
steps.day.filled <- aggregate(steps ~ date, data=dta.filled, FUN=sum)
View(steps.day.filled)
View(steps.day)
View(steps.day.filled)
View(steps.day)
View(steps.day.filled)
?format
View(steps.day.filled)
str(steps.day.filled)
pp <- steps.day.filled
pp
detwd()
getwd()
pp$date <- strptime(pp$date, "%Y-%m-%d")
str(pp)
dta.filled.wk <- dta.filled
dta.filled.wk$date <- strptime(dta.filled.wk$date, "%Y-%m-%d")
str(dta.filled.wk)
source('~/.active-rstudio-document', echo=TRUE)
rm(data.filled.wk)
rm(dta.filled.wk)
dta.filled$day[weekdays(as.Date(ta.filled$date)) %in% c("Saturday", "Sunday")] <- "weekend"
dta.filled$day[weekdays(as.Date(dta.filled$date)) %in% c("Saturday", "Sunday")] <- "weekend"
dta.filled$day[!weekdays(as.Date(dta.filled$date)) %in% c("Saturday", "Sunday")] <- "weekday"
str(dta.filled)
head(dta.filled)
tail(dta.filled)
str(dta.filled)
dta.filled[,"day"] <- as.factor(dta.filled[,"day"]
)
str(dta.filled)
steps.days <- aggregate(steps ~ interval + day, data=dta.filled, FUN=mean)
ggplot(steps.days, aes(x=interval, y=steps, group=1)) + geom_line() +
facet_wrap(~ day, ncol=1)
steps.days <- aggregate(steps ~ interval + day, data=dta.filled, FUN=mean)
ggplot(steps.days,
aes(x=interval, y=steps, group=1)) +
geom_line() +
facet_wrap(~ day, ncol=1) +
labs(x = "Interval",
y = "Number of Steps")
apply(pp,1,print(pp$steps)
)
apply(pp,1,print(pp$steps))
apply(pp,1,print(pp$steps))
fprt <- function() {print(pp$steps)}
apply(pp,1,fprt)
tapply(pp,1,fprt)
fprt()
tapply(pp,1,fprt())
?switch
is.na(dta.filled[i,"steps"])
is.na(dta.filled["steps"])
is.na(dta.filled[1,"steps"])
is.na(dta.filled$steps")
)
))
is.na(dta.filled$steps)
View(pp)
View(steps.day.filled)
source('~/.active-rstudio-document', echo=TRUE)
View(dta.filled)
View(dta.complete)
View(dta)
View(dta.complete)
source('~/.active-rstudio-document', echo=TRUE)
View(dta.filled)
dta.filled <- dta  # Create a data frame dta.filled to save the data with the missing values filled.
View(dta.filled)
View(dta.complete)
View(dta)
View(dta.filled)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
apply(dta.filled,1,fill.data2)
dta.filled <- dta  # Create a data frame dta.filled to save the data with the missing values filled.
if (is.na(dta.filled$steps)) {   # Check the value for steps is missing
t1 <- dta.filled$interval      # the value of that interval in t1.  Should be between 0 and 2355
# Use the index t2 to map into the correct row of the steps.interval data frame that
# has the value of the means for each interval.
t2 <- steps.interval[(steps.interval$interval==t1),"steps"]
dta.filled$steps <- t2         # Fill the missing data.
# print(paste(i, dta.filled[i,"steps"]))  # Debug code
}
is.na(dta.filled$steps)
tapply(dta.filled,1,fill.data2)
tapply(dta.filled,fill.data2)
sapply(dta.filled,fill.data2)
?mapply
source('~/.active-rstudio-document', echo=TRUE)
